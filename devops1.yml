---

## DevOps CHALLENGE playbook

- hosts: centos 
  sudo: yes
  gather_facts: no

# Install httpd openssl and mod_ssl

  tasks:
    - name: ensure apache is installed
      yum: pkg=httpd state=latest

    - name: ensure openssl is installed
      yum: pkg=openssl state=latest

    - name: ensure mod_ssl is installed
      yum: pkg=mod_ssl state=latest

# Generate ssl certificates and modify ssl.conf file
# check for ssl.conf file
    - stat: path=/etc/httpd/conf.d/ssl.conf
      register: ssl_conf

    - name: generate ssl certificates
      command: "{{ item }} chdir=/etc/httpd/conf.d/"
      with_items:
      - /usr/bin/openssl req -nodes -newkey rsa:2048 -keyout ca.key -out ca.csr -subj "/C=US/ST=NJ/L=Tinton Falls/O=Default Company Ltd/OU=IT Department"
      - /usr/bin/openssl x509 -req -days 365 -in ca.csr -signkey ca.key -out ca.crt

    - name: copy crt certificates
      command: mv /etc/httpd/conf.d/ca.crt /etc/pki/tls/certs

    - name: copy ca and key certs
      command: "mv {{item}} "
      with_items:
      - /etc/httpd/conf.d/ca.key /etc/pki/tls/private/ca.key
      - /etc/httpd/conf.d/ca.csr /etc/pki/tls/private/ca.csr

    - name: modify ssl.conf file
      lineinfile:
        dest: /etc/httpd/conf.d/ssl.conf
        regexp: "{{ item.regexp }}" 
        line: "{{ item.line }}"
      with_items:
        - { regexp: "^SSLCertificateFile", line: "SSLCertificateFile /etc/pki/tls/certs/ca.crt" }
        - { regexp: "^SSLCertificateKeyFile", line: "SSLCertificateKeyFile /etc/pki/tls/private/ca.key" }
      when: ssl_conf.stat.exists == True

# Copy index.html template file to remote server 

    - name: deploy website content
      template: src=templates/index.html.j2 dest=/var/www/html/index.html

# Configure the iptables file
# check for iptables file
    - stat: path=/etc/sysconfig/iptables
      register: iptables_file

    - name: iptables_add
      iptables: chain={{ item.chain }} protocol={{ item.protocol }} match={{ item.match }} destination_port={{ item.dport }} jump={{ item.jump }}
      with_items:
        - { chain: INPUT, protocol: tcp, match: tcp, dport: 22, jump: ACCEPT }
        - { chain: INPUT, protocol: tcp, match: tcp, dport: 80, jump: ACCEPT }
        - { chain: INPUT, protocol: tcp, match: tcp, dport: 443, jump: ACCEPT }
      when: iptables_file.stat.exists == True

# Make iptables persistent
    - name: make_perm
      command: service iptables save


# Restart iptables and httpd

    - name: restart iptables
      service: name=iptables state=restarted

    - name: restart apache
      service: name=httpd state=restarted
